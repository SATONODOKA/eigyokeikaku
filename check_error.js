const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 300
  });
  const page = await browser.newPage();
  
  // „Åô„Åπ„Å¶„ÅÆ„Ç≥„É≥„ÇΩ„Éº„É´„É°„ÉÉ„Çª„Éº„Ç∏„Çí„Ç≠„É£„Éó„ÉÅ„É£
  page.on('console', msg => {
    const type = msg.type();
    const text = msg.text();
    if (type === 'error') {
      console.log(`üî¥ ERROR: ${text}`);
    } else if (type === 'warning') {
      console.log(`‚ö†Ô∏è WARNING: ${text}`);
    } else if (text.includes('Error') || text.includes('error')) {
      console.log(`‚ùó ${type}: ${text}`);
    }
  });
  
  // „Éö„Éº„Ç∏„Ç®„É©„Éº„Çí„Ç≠„É£„Éó„ÉÅ„É£
  page.on('pageerror', error => {
    console.log(`\n‚ùå PAGE ERROR:`);
    console.log(error.message);
    console.log(error.stack);
  });
  
  try {
    console.log('üåê http://localhost:3000 „ÇíÈñã„Åç„Åæ„Åô...\n');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle' });
    await page.waitForTimeout(3000);
    
    console.log('\nüì∏ „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„ÇíÊíÆÂΩ±...');
    await page.screenshot({ path: 'error_check.png', fullPage: true });
    
    console.log('‚úÖ „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà‰øùÂ≠ò: error_check.png');
    console.log('\n„Éñ„É©„Ç¶„Ç∂„ÅßÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇEnter„Ç≠„Éº„ÅßÁµÇ‰∫Ü...');
    await new Promise(resolve => process.stdin.once('data', resolve));
    
  } catch (error) {
    console.error('\n‚ùå „Ç®„É©„Éº:', error.message);
    console.error(error.stack);
  } finally {
    await browser.close();
  }
})();

